//
//  ViewController.swift
//  travel
//
//  Created by Абай on 12.06.2023.
//


import UIKit

class DestinationCell: UICollectionViewCell {
    static let reuseIdentifier = "DestinationCell"
    
    let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.clipsToBounds = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.layer.cornerRadius = 10 // Rounded corner radius
        return imageView
    }()
    
    let titleLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.boldSystemFont(ofSize: 16)
        label.textAlignment = .left
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    let priceLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 14)
        label.textColor = .black
        label.textAlignment = .left
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    let ratingView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor(red: 226/255, green: 160/255, blue: 75/255, alpha: 1.0) // #E2A04B color
        view.translatesAutoresizingMaskIntoConstraints = false
        view.layer.cornerRadius = 8.0 // Rounded corners for rating box
        return view
    }()
    
    let starImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "star.fill")
        imageView.tintColor = UIColor(red: 1.0, green: 0.85, blue: 0.65, alpha: 1.0) // #FFD9A7 color
        imageView.contentMode = .scaleAspectFit
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    let ratingNumberLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 12)
        label.textColor = .white
        label.text = "4.8"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        contentView.addSubview(imageView)
        contentView.addSubview(titleLabel)
        contentView.addSubview(priceLabel)
        contentView.addSubview(ratingView)
        ratingView.addSubview(starImageView)
        ratingView.addSubview(ratingNumberLabel)
        
        NSLayoutConstraint.activate([
            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),
            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            imageView.bottomAnchor.constraint(equalTo: titleLabel.topAnchor), // Adjusted constraint
            
            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),
            titleLabel.bottomAnchor.constraint(equalTo: priceLabel.topAnchor, constant: -4),
            
            priceLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),
            priceLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),
            
            ratingView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 18), // Adjusted constraint
            ratingView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -18), // Adjusted constraint
            ratingView.widthAnchor.constraint(equalToConstant: 50),
            ratingView.heightAnchor.constraint(equalToConstant: 20),
            
            starImageView.leadingAnchor.constraint(equalTo: ratingView.leadingAnchor, constant: 4),
            starImageView.centerYAnchor.constraint(equalTo: ratingView.centerYAnchor),
            starImageView.trailingAnchor.constraint(lessThanOrEqualTo: ratingNumberLabel.leadingAnchor, constant: -4),
            
            ratingNumberLabel.trailingAnchor.constraint(equalTo: ratingView.trailingAnchor, constant: -4),
            ratingNumberLabel.centerYAnchor.constraint(equalTo: ratingView.centerYAnchor)
        ])
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}


class ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {
    let destinations = ["Miami", "New York", "Boston", "Las Vegas", "Los Angeles", "Tokyo"]
    
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = CGSize(width: UIScreen.main.bounds.width / 2 - 24, height: 190) // Adjusted item size
        layout.minimumLineSpacing = 16
        layout.minimumInteritemSpacing = 16
        
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.backgroundColor = .white
        return collectionView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(DestinationCell.self, forCellWithReuseIdentifier: DestinationCell.reuseIdentifier)
        view.addSubview(collectionView)
        
        NSLayoutConstraint.activate([
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            collectionView.topAnchor.constraint(equalTo: view.topAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        // Create view controllers for each tab
        let homeViewController = self
        homeViewController.tabBarItem = UITabBarItem(title: "Главная", image: UIImage(systemName: "house"), tag: 0)
        
        let feedViewController = UIViewController()
        feedViewController.view.backgroundColor = .white
        feedViewController.tabBarItem = UITabBarItem(title: "Лента", image: UIImage(systemName: "newspaper"), tag: 1)
        
        let plannerViewController = UIViewController()
        plannerViewController.view.backgroundColor = .white
        plannerViewController.tabBarItem = UITabBarItem(title: "Планнер", image: UIImage(systemName: "calendar"), tag: 2)
        
        let profileViewController = UIViewController()
        profileViewController.view.backgroundColor = .white
        profileViewController.tabBarItem = UITabBarItem(title: "Профиль", image: UIImage(systemName: "person.crop.circle"), tag: 3)
        
        // Create the tab bar controller
        let tabBarController = UITabBarController()
        tabBarController.viewControllers = [homeViewController, feedViewController, plannerViewController, profileViewController]
        
        // Set the tab bar controller as the root view controller
        UIApplication.shared.windows.first?.rootViewController = tabBarController
    }
    
    // MARK: - UICollectionViewDataSource
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return destinations.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DestinationCell.reuseIdentifier, for: indexPath) as! DestinationCell
        
        cell.imageView.image = UIImage(named: "image")
        cell.titleLabel.text = destinations[indexPath.item]
        cell.priceLabel.text = "$200"
        
        // Configure rating view
        cell.ratingView.layer.cornerRadius = 8.0 // Rounded corners for rating box
        
        return cell
    }
}

extension ViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 16
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 16
    }
}
